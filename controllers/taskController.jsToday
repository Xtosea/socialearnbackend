import Task from "../models/Task.js";
import User from "../models/User.js";
import History from "../models/HistoryLog.js";
import PromotionSettings from "../models/PromotionSettings.js";

// ===============================
// Helper: create history log
// ===============================
const logHistory = async ({ user, taskType, taskId, amount, description, metadata = {} }) => {
  try {
    await History.create({
      user,
      taskType,
      taskId,
      amount,
      description,
      metadata,
    });
  } catch (err) {
    console.error("History log error:", err.message);
  }
};

// ===============================
// Add Social Task
// ===============================
export const addSocialTask = async (req, res) => {
  try {
    let { url, platform, type, points, fund } = req.body;
    const userId = req.user.id;

    if (!url || !type || !platform || !points) {
      return res.status(400).json({ message: "Missing required fields" });
    }

    platform = platform.toLowerCase().trim();
    const user = await User.findById(userId);
    if (!user) return res.status(404).json({ message: "User not found" });

    if (fund && user.points < fund) {
      return res.status(400).json({ message: "Not enough points to fund this task" });
    }

    if (fund) {
      user.points -= fund;
      await user.save();
      await logHistory({ user: user._id, taskType: "debit", taskId: null, amount: fund, description: "Created social task" });
    }

    const task = new Task({
      url,
      type,         // like | comment | share | follow
      platform,     
      points,
      fund: fund || 0,
      createdBy: user._id,
      status: "active",
    });

    await task.save();
    res.status(201).json({ message: "Social task created", task });
  } catch (err) {
    console.error("Add Social Task error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ===============================
// Add Video Task
// ===============================
export const addVideoTask = async (req, res) => {
  try {
    const { url, platform, duration, watches } = req.body;
    const user = await User.findById(req.user.id);
    if (!user) return res.status(404).json({ message: "User not found" });

    const pointsPerView = 2;
    const totalCost = watches * pointsPerView;

    if (user.points < totalCost) return res.status(400).json({ message: "Not enough points" });

    user.points -= totalCost;
    await user.save();

    const task = await Task.create({
      url,
      platform,
      type: "video",
      duration,
      watches,
      points: pointsPerView,
      createdBy: user._id,
      status: "active",
    });

    await logHistory({
      user: user._id,
      taskType: "admin",
      taskId: task._id,
      amount: -totalCost,
      description: `Created ${platform} video task (${watches} watches)`,
    });

    res.json({ message: "Video task created", task });
  } catch (err) {
    console.error("Add Video Task error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ===============================
// Get Tasks
// ===============================
export const getVideoTasks = async (req, res) => {
  try {
    const tasks = await Task.find({ type: "video", status: "active" })
      .sort({ createdAt: -1 })
      .limit(20);
    res.json({ tasks });
  } catch (err) {
    res.status(500).json({ message: "Server error" });
  }
};

export const getPromotedTasksByPlatform = async (req, res) => {
  try {
    const { platform } = req.params;
    if (!platform) return res.status(400).json({ message: "Platform is required" });

    const tasks = await Task.find({
      type: "video",
      platform: platform.toLowerCase(),
      promoted: true,
      status: "active",
    }).sort({ createdAt: -1 });

    res.json({ tasks });
  } catch (err) {
    console.error("Get Promoted Tasks error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ===============================
// Start / Complete Watch
// ===============================
export const startWatch = async (req, res) => {
  try {
    const { taskId } = req.params;
    const task = await Task.findById(taskId);
    if (!task) return res.status(404).json({ message: "Task not found" });

    if (!req.session) req.session = {};
    req.session[`${req.user.id}_${taskId}`] = Date.now();

    res.json({ message: "Watch started", task });
  } catch (err) {
    res.status(500).json({ message: "Server error" });
  }
};

export const completeWatch = async (req, res) => {
  try {
    const { taskId } = req.params;
    const user = await User.findById(req.user.id);
    const task = await Task.findById(taskId);
    if (!user || !task) return res.status(404).json({ message: "Not found" });

    const startKey = `${req.user.id}_${taskId}`;
    const startedAt = req.session?.[startKey];
    const elapsed = startedAt ? (Date.now() - startedAt) / 1000 : 0;
    const requiredTime = Math.floor(task.duration * 0.8);

    if (elapsed < requiredTime) {
      return res.status(400).json({ message: `You must watch at least ${requiredTime}s` });
    }

    user.points += task.points;
    await user.save();

    await logHistory({
      user: user._id,
      taskType: "video-view",
      taskId: task._id,
      amount: task.points,
      description: `Watched ${task.platform} video`,
    });

    delete req.session[startKey];

    res.json({ message: "Watch completed", pointsEarned: task.points, currentPoints: user.points });
  } catch (err) {
    console.error("Complete Watch error:", err);
    res.status(500).json({ message: "Server error" });
  }
};

// ===============================
// Complete Social Action
// ===============================
export const completeSocialAction = async (req, res) => {
  try {
    const { taskId } = req.params;
    const { actionType } = req.body;

    const user = await User.findById(req.user.id);
    const task = await Task.findById(taskId);
    if (!user || !task) return res.status(404).json({ message: "Not found" });

    if (task.type !== "social") return res.status(400).json({ message: "Not a social task" });
    if (task.completedBy.includes(user._id)) return res.status(400).json({ message: "Already completed this task" });

    const reward = task.points || 1;
    user.points += reward;
    await user.save();

    task.completedBy.push(user._id);
    await task.save();

    await logHistory({
      user: user._id,
      taskType: "action",
      taskId: task._id,
      amount: reward,
      description: `Completed ${actionType} on ${task.platform} post`,
      metadata: { actionType },
    });

    res.json({ message: "Social action completed", pointsEarned: reward, currentPoints: user.points });
  } catch (err) {
    console.error("Complete Social Action error:", err);
    res.status(500).json({ message: "Server error" });
  }
};